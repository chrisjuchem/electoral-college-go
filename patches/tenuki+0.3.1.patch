diff --git a/node_modules/tenuki/lib/board-state.js b/node_modules/tenuki/lib/board-state.js
index 22a8b08..b72f780 100644
--- a/node_modules/tenuki/lib/board-state.js
+++ b/node_modules/tenuki/lib/board-state.js
@@ -82,7 +82,7 @@ BoardState.prototype = {
       // we're checking against the move before the stone we just played
       // where this space is not occupied yet. things should possibly be
       // reworked.
-      return !neighbor.isEmpty() && neighbor.value !== color && _this.libertiesAt(neighbor.y, neighbor.x) === 1;
+      return neighbor.isStone() && neighbor.value !== color && _this.libertiesAt(neighbor.y, neighbor.x) === 1;
     });
 
     var capturedStones = _utils2.default.flatMap(capturedNeighbors, function (neighbor) {
@@ -131,7 +131,7 @@ BoardState.prototype = {
   },
 
   yCoordinateFor: function yCoordinateFor(y) {
-    return this.boardSize - y;
+    return this.boardSize.y - y;
   },
 
   xCoordinateFor: function xCoordinateFor(x) {
@@ -226,7 +226,7 @@ BoardState.prototype = {
   },
 
   intersectionAt: function intersectionAt(y, x) {
-    if (y >= this.boardSize || x >= this.boardSize) {
+    if (y >= this.boardSize.y || x >= this.boardSize.x) {
       throw new Error("Intersection at (" + y + ", " + x + ") would be outside the board");
     }
 
@@ -234,7 +234,7 @@ BoardState.prototype = {
       throw new Error("Intersection position cannot be negative, but was given (" + y + ", " + x + ")");
     }
 
-    return this.intersections[y * this.boardSize + x];
+    return this.intersections[y * this.boardSize.x + x];
   },
 
   groupAt: function groupAt(y, x) {
@@ -275,7 +275,7 @@ BoardState.prototype = {
       neighbors.push(this.intersectionAt(y, x - 1));
     }
 
-    if (x < this.boardSize - 1) {
+    if (x < this.boardSize.x - 1) {
       neighbors.push(this.intersectionAt(y, x + 1));
     }
 
@@ -283,7 +283,7 @@ BoardState.prototype = {
       neighbors.push(this.intersectionAt(y - 1, x));
     }
 
-    if (y < this.boardSize - 1) {
+    if (y < this.boardSize.y - 1) {
       neighbors.push(this.intersectionAt(y + 1, x));
     }
 
@@ -334,30 +334,23 @@ BoardState.prototype = {
   }
 };
 
-BoardState._initialFor = function (boardSize, handicapStones) {
-  this._cache = this._cache || {};
-  this._cache[boardSize] = this._cache[boardSize] || {};
-
-  if (this._cache[boardSize][handicapStones]) {
-    return this._cache[boardSize][handicapStones];
-  }
-
-  var emptyPoints = Array.apply(null, Array(boardSize * boardSize));
+BoardState._initialFor = function (boardSize, handicapStones, oob) {
+  var emptyPoints = Array.apply(null, Array(boardSize.x * boardSize.y));
   emptyPoints = emptyPoints.map(function (x, i) {
-    return new _intersection2.default(Math.floor(i / boardSize), i % boardSize);
+    return new _intersection2.default(Math.floor(i / boardSize.x), i % boardSize.x);
   });
 
-  var hoshiOffset = boardSize > 11 ? 3 : 2;
+  var hoshiOffset = boardSize.x > 11 ? 3 : 2;
   var hoshiPoints = {
-    topRight: { y: hoshiOffset, x: boardSize - hoshiOffset - 1 },
-    bottomLeft: { y: boardSize - hoshiOffset - 1, x: hoshiOffset },
-    bottomRight: { y: boardSize - hoshiOffset - 1, x: boardSize - hoshiOffset - 1 },
+    topRight: { y: hoshiOffset, x: boardSize.x - hoshiOffset - 1 },
+    bottomLeft: { y: boardSize.y - hoshiOffset - 1, x: hoshiOffset },
+    bottomRight: { y: boardSize.y - hoshiOffset - 1, x: boardSize.x - hoshiOffset - 1 },
     topLeft: { y: hoshiOffset, x: hoshiOffset },
-    middle: { y: (boardSize + 1) / 2 - 1, x: (boardSize + 1) / 2 - 1 },
-    middleLeft: { y: (boardSize + 1) / 2 - 1, x: hoshiOffset },
-    middleRight: { y: (boardSize + 1) / 2 - 1, x: boardSize - hoshiOffset - 1 },
-    middleTop: { y: hoshiOffset, x: (boardSize + 1) / 2 - 1 },
-    middleBottom: { y: boardSize - hoshiOffset - 1, x: (boardSize + 1) / 2 - 1 }
+    middle: { y: (boardSize.y + 1) / 2 - 1, x: (boardSize.x + 1) / 2 - 1 },
+    middleLeft: { y: (boardSize.y + 1) / 2 - 1, x: hoshiOffset },
+    middleRight: { y: (boardSize.y + 1) / 2 - 1, x: boardSize.x - hoshiOffset - 1 },
+    middleTop: { y: hoshiOffset, x: (boardSize.x + 1) / 2 - 1 },
+    middleBottom: { y: boardSize.y - hoshiOffset - 1, x: (boardSize.x + 1) / 2 - 1 }
   };
   var handicapPlacements = {
     0: [],
@@ -373,9 +366,14 @@ BoardState._initialFor = function (boardSize, handicapStones) {
   };
 
   handicapPlacements[handicapStones].forEach(function (p) {
-    emptyPoints[p.y * boardSize + p.x] = new _intersection2.default(p.y, p.x, "black");
+    emptyPoints[p.y * boardSize.x + p.x] = new _intersection2.default(p.y, p.x, "black");
   });
 
+  for (let i = 0; i < oob.length; i++) {
+    var p = oob[i];
+    emptyPoints[p.y * boardSize.x + p.x] = new _intersection2.default(p.y, p.x, "oob");
+  }
+
   var initialState = new BoardState({
     color: handicapStones > 1 ? "black" : "white",
     moveNumber: 0,
@@ -387,7 +385,6 @@ BoardState._initialFor = function (boardSize, handicapStones) {
     boardSize: boardSize
   });
 
-  this._cache[boardSize][handicapStones] = initialState;
   return initialState;
 };
 
diff --git a/node_modules/tenuki/lib/client.js b/node_modules/tenuki/lib/client.js
index 2614d87..15b5fe1 100644
--- a/node_modules/tenuki/lib/client.js
+++ b/node_modules/tenuki/lib/client.js
@@ -43,14 +43,12 @@ Client.prototype = {
         _this._busy = true;
 
         if (_this.isOver()) {
-          var stonesToBeMarkedDead = _this._game.currentState().groupAt(y, x).map(function (i) {
-            return {
-              y: i.y,
-              x: i.x,
-              color: i.color
-            };
-          });
+          var stonesToBeMarkedDead = _this._game.currentState().groupAt(y, x);
+          if (!stonesToBeMarkedDead[0].isStone()) {
+            _this._busy = false;
 
+            return;
+          }
           _this._hooks.submitMarkDeadAt(y, x, stonesToBeMarkedDead, function (result) {
             if (result) {
               _this._game.toggleDeadAt(y, x);
@@ -97,6 +95,14 @@ Client.prototype = {
     return this._game.isOver();
   },
 
+  territory: function territory() {
+    return this._game.territory();
+  },
+
+  intersectionAt: function intersectionAt(y, x) {
+    return this._game.intersectionAt(y, x);
+  },
+
   currentPlayer: function currentPlayer() {
     return this._game.currentPlayer();
   },
diff --git a/node_modules/tenuki/lib/game.js b/node_modules/tenuki/lib/game.js
index 88875fc..f785677 100644
--- a/node_modules/tenuki/lib/game.js
+++ b/node_modules/tenuki/lib/game.js
@@ -34,7 +34,7 @@ var _scorer2 = _interopRequireDefault(_scorer);
 
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
-var VALID_GAME_OPTIONS = ["element", "boardSize", "scoring", "handicapStones", "koRule", "komi", "_hooks", "fuzzyStonePlacement", "renderer", "freeHandicapPlacement"];
+var VALID_GAME_OPTIONS = ["element", "boardSize", "oob", "tints", "scoring", "handicapStones", "koRule", "komi", "_hooks", "fuzzyStonePlacement", "renderer", "freeHandicapPlacement"];
 
 var Game = function Game() {
   var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
@@ -85,28 +85,32 @@ Game.prototype = {
         scoring = _ref$scoring === undefined ? this._defaultScoring : _ref$scoring,
         _ref$koRule = _ref.koRule,
         koRule = _ref$koRule === undefined ? this._defaultKoRule : _ref$koRule,
+        _ref$oob = _ref.oob,
+        oob = _ref$oob === undefined ? [] : _ref$oob,
+        _ref$tints = _ref.tints,
+        tints = _ref$tints === undefined ? [] : _ref$tints,
         _ref$renderer = _ref.renderer,
         renderer = _ref$renderer === undefined ? this._defaultRenderer : _ref$renderer;
 
-    if (typeof boardSize !== "number") {
-      throw new Error("Board size must be a number, but was: " + (typeof boardSize === "undefined" ? "undefined" : _typeof(boardSize)));
+    if (typeof boardSize === "number") {
+      boardSize = {x: boardSize, y: boardSize};
     }
 
     if (typeof handicapStones !== "number") {
       throw new Error("Handicap stones must be a number, but was: " + (typeof boardSize === "undefined" ? "undefined" : _typeof(boardSize)));
     }
 
-    if (handicapStones > 0 && boardSize !== 9 && boardSize !== 13 && boardSize !== 19) {
-      throw new Error("Handicap stones not supported on sizes other than 9x9, 13x13 and 19x19");
-    }
+//    if (handicapStones > 0 && boardSize !== 9 && boardSize !== 13 && boardSize !== 19) {
+//      throw new Error("Handicap stones not supported on sizes other than 9x9, 13x13 and 19x19");
+//    }
 
     if (handicapStones < 0 || handicapStones === 1 || handicapStones > 9) {
       throw new Error("Only 2 to 9 handicap stones are supported");
     }
 
-    if (boardSize > 19) {
-      throw new Error("cannot generate a board size greater than 19");
-    }
+//    if (boardSize > 19) {
+//      throw new Error("cannot generate a board size greater than 19");
+//    }
 
     this.boardSize = boardSize;
     this.handicapStones = handicapStones;
@@ -131,9 +135,9 @@ Game.prototype = {
     });
 
     if (this._freeHandicapPlacement) {
-      this._initialState = _boardState2.default._initialFor(boardSize, 0);
+      this._initialState = _boardState2.default._initialFor(boardSize, 0, oob);
     } else {
-      this._initialState = _boardState2.default._initialFor(boardSize, handicapStones);
+      this._initialState = _boardState2.default._initialFor(boardSize, handicapStones, oob);
     }
   },
 
@@ -173,7 +177,8 @@ Game.prototype = {
       this.renderer = new this._rendererChoice(this._boardElement, {
         hooks: options["_hooks"] || defaultRendererHooks,
         options: {
-          fuzzyStonePlacement: options["fuzzyStonePlacement"]
+          fuzzyStonePlacement: options["fuzzyStonePlacement"],
+          tints: options["tints"] || []
         }
       });
     } else {
@@ -338,7 +343,7 @@ Game.prototype = {
         candidates = _currentState$partiti2[0];
 
     candidates.forEach(function (sameColorOrEmpty) {
-      if (!sameColorOrEmpty.isEmpty()) {
+      if (sameColorOrEmpty.isStone()) {
         chosenDead.push(sameColorOrEmpty);
       }
     });
diff --git a/node_modules/tenuki/lib/intersection.js b/node_modules/tenuki/lib/intersection.js
index 0410b21..b29fca4 100644
--- a/node_modules/tenuki/lib/intersection.js
+++ b/node_modules/tenuki/lib/intersection.js
@@ -28,6 +28,10 @@ Intersection.prototype = {
     return this.value === "white";
   },
 
+  isStone: function isStone() {
+    return this.isWhite() || this.isBlack();
+  },
+
   isEmpty: function isEmpty() {
     return this.value === "empty";
   },
diff --git a/node_modules/tenuki/lib/region.js b/node_modules/tenuki/lib/region.js
index 249abcd..cd4c322 100644
--- a/node_modules/tenuki/lib/region.js
+++ b/node_modules/tenuki/lib/region.js
@@ -95,7 +95,7 @@ Region.prototype = {
 
     var surroundingColors = _utils2.default.unique(boundaryPoints.map(function (i) {
       return i.value;
-    }));
+    })).filter(function (color) {return color !== "oob"});
     var isTerritory = surroundingColors.length === 1 && surroundingColors[0] !== "empty";
 
     return isTerritory;
@@ -111,7 +111,7 @@ Region.prototype = {
 
     var surroundingColors = _utils2.default.unique(boundaryPoints.map(function (i) {
       return i.value;
-    }));
+    })).filter(function (color) {return color !== "oob"});
     var isTerritory = surroundingColors.length === 1 && surroundingColors[0] !== "empty";
 
     if (!point.isEmpty() || !isTerritory) {
diff --git a/node_modules/tenuki/lib/renderer.js b/node_modules/tenuki/lib/renderer.js
index 229e802..3f45da5 100644
--- a/node_modules/tenuki/lib/renderer.js
+++ b/node_modules/tenuki/lib/renderer.js
@@ -44,22 +44,22 @@ var Renderer = function Renderer(boardElement, _ref) {
 Renderer.hoshiPositionsFor = function (boardSize) {
   var hoshiElements = [];
 
-  if (boardSize < 7) {
-    if (boardSize > 1 && boardSize % 2 === 1) {
+  if (boardSize.x < 7) {
+    if (boardSize.x > 1 && boardSize.x % 2 === 1) {
       var hoshi = {};
-      hoshi.top = (boardSize - 1) / 2;
-      hoshi.left = hoshi.top;
+      hoshi.top = (boardSize.y - 1) / 2;
+      hoshi.left = (boardSize.x - 1) / 2;
 
       hoshiElements.push(hoshi);
     } else {
       // no hoshi
     }
   } else {
-    var hoshiOffset = boardSize > 11 ? 3 : 2;
+    var hoshiOffset = boardSize.x > 11 ? 3 : 2;
 
     for (var hoshiY = 0; hoshiY < 3; hoshiY++) {
       for (var hoshiX = 0; hoshiX < 3; hoshiX++) {
-        if ((boardSize === 7 || boardSize % 2 === 0) && (hoshiY === 1 || hoshiX === 1)) {
+        if ((boardSize.x === 7 || boardSize.x % 2 === 0) && (hoshiY === 1 || hoshiX === 1)) {
           continue;
         }
 
@@ -70,11 +70,11 @@ Renderer.hoshiPositionsFor = function (boardSize) {
         }
 
         if (hoshiY === 1) {
-          _hoshi.top = (boardSize + 1) / 2 - 1;
+          _hoshi.top = (boardSize.y + 1) / 2 - 1;
         }
 
         if (hoshiY === 2) {
-          _hoshi.top = boardSize - hoshiOffset - 1;
+          _hoshi.top = boardSize.y - hoshiOffset - 1;
         }
 
         if (hoshiX === 0) {
@@ -82,11 +82,11 @@ Renderer.hoshiPositionsFor = function (boardSize) {
         }
 
         if (hoshiX === 1) {
-          _hoshi.left = (boardSize + 1) / 2 - 1;
+          _hoshi.left = (boardSize.x + 1) / 2 - 1;
         }
 
         if (hoshiX === 2) {
-          _hoshi.left = boardSize - hoshiOffset - 1;
+          _hoshi.left = boardSize.x - hoshiOffset - 1;
         }
 
         hoshiElements.push(_hoshi);
@@ -102,7 +102,8 @@ Renderer.prototype = {
     var renderer = this;
     var boardElement = this.boardElement;
 
-    renderer.BOARD_LENGTH = 2 * this.MARGIN + (boardState.boardSize - 1) * (this.INTERSECTION_GAP_SIZE + 1);
+    renderer.BOARD_HEIGHT = 2 * this.MARGIN + (boardState.boardSize.y - 1) * (this.INTERSECTION_GAP_SIZE + 1);
+    renderer.BOARD_WIDTH = 2 * this.MARGIN + (boardState.boardSize.x - 1) * (this.INTERSECTION_GAP_SIZE + 1);
 
     var innerContainer = _utils2.default.createElement("div", { class: "tenuki-inner-container" });
     renderer.innerContainer = innerContainer;
@@ -196,15 +197,16 @@ Renderer.prototype = {
     // dev-friendly reset of whether this is a touch device
     renderer._touchEventFired = null;
 
-    innerContainer.style.width = renderer.BOARD_LENGTH + "px";
-    innerContainer.style.height = renderer.BOARD_LENGTH + "px";
+    innerContainer.style.width = renderer.BOARD_WIDTH + "px";
+    innerContainer.style.height = renderer.BOARD_HEIGHT + "px";
 
-    zoomContainer.style.width = renderer.BOARD_LENGTH + "px";
-    zoomContainer.style.height = renderer.BOARD_LENGTH + "px";
+    zoomContainer.style.width = renderer.BOARD_WIDTH + "px";
+    zoomContainer.style.height = renderer.BOARD_HEIGHT + "px";
 
     var scaleX = innerContainer.parentNode.clientWidth / innerContainer.clientWidth;
     var scaleY = innerContainer.parentNode.clientHeight / innerContainer.clientHeight;
     var scale = Math.min(scaleX, scaleY);
+    renderer.baseScale = scale;
 
     if (scale > 0) {
       if (scale < 1) {
@@ -265,10 +267,9 @@ Renderer.prototype = {
       var playedXPosition = x;
 
       // if this isn't part of a touch,
-      // or it is and the user is zoomed in,
       // or it's game over and we're marking stones dead,
       // then don't use the zoom/double-select system.
-      if (!renderer._touchEventFired || document.body.clientWidth / window.innerWidth > 1 || renderer.hooks.gameIsOver()) {
+      if (!renderer._touchEventFired || renderer.hooks.gameIsOver()) {
         renderer.hooks.handleClick(playedYPosition, playedXPosition);
         return;
       }
@@ -276,6 +277,7 @@ Renderer.prototype = {
       if (renderer.touchedPoint) {
         if (element === renderer.touchedPoint) {
           renderer.hooks.handleClick(playedYPosition, playedXPosition);
+          renderer.zoomOut();
         } else {
           renderer.showPossibleMoveAt(element, playedYPosition, playedXPosition);
         }
@@ -367,8 +369,8 @@ Renderer.prototype = {
     var deltaX = xCursor - renderer.dragStartX;
     var deltaY = yCursor - renderer.dragStartY;
 
-    var translateY = renderer.translateY + deltaY / 2.5;
-    var translateX = renderer.translateX + deltaX / 2.5;
+    var translateY = renderer.translateY + deltaY / 2.5 / renderer.baseScale;
+    var translateX = renderer.translateX + deltaX / 2.5 / renderer.baseScale;
 
     if (translateY > 0.5 * innerContainer.clientHeight - renderer.MARGIN) {
       translateY = 0.5 * innerContainer.clientHeight - renderer.MARGIN;
@@ -547,7 +549,7 @@ Renderer.prototype = {
 
     var classes = ["intersection"];
 
-    if (intersection.isEmpty()) {
+    if (!intersection.isStone()) {
       classes.push("empty");
     } else {
       classes.push("occupied");
@@ -567,6 +569,12 @@ Renderer.prototype = {
       });
     }
 
+    var _tint_row = this._options["tints"][intersection.y]
+    var tint = _tint_row && _tint_row[intersection.x]
+    if (tint) {
+        classes.push("tint-"+tint);
+    }
+
     this.setIntersectionClasses(intersectionEl, intersection, classes);
   },
 
diff --git a/node_modules/tenuki/lib/svg-renderer.js b/node_modules/tenuki/lib/svg-renderer.js
index 4fd8676..512f9d6 100644
--- a/node_modules/tenuki/lib/svg-renderer.js
+++ b/node_modules/tenuki/lib/svg-renderer.js
@@ -99,19 +99,37 @@ var constructSVG = function constructSVG(renderer, boardState, _ref2) {
       }
     });
 
-    for (var y = 0; y < boardState.boardSize - 1; y++) {
-      for (var x = 0; x < boardState.boardSize - 1; x++) {
-        var lineBox = _utils2.default.createSVGElement("rect", {
-          attributes: {
-            y: y * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
-            x: x * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
-            width: renderer.INTERSECTION_GAP_SIZE + 1,
-            height: renderer.INTERSECTION_GAP_SIZE + 1,
-            class: "line-box"
-          }
-        });
+    for (var y = 0; y < boardState.boardSize.y; y++) {
+      for (var x = 0; x < boardState.boardSize.x; x++) {
+        if (boardState.intersectionAt(y, x).value === "oob") {
+          continue;
+        }
 
-        _utils2.default.appendElement(lines, lineBox);
+        if (x + 1 < boardState.boardSize.x && boardState.intersectionAt(y, x + 1).value !== "oob") {
+          var line = _utils2.default.createSVGElement("line", {
+            attributes: {
+              y1: y * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
+              x1: x * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
+              y2: y * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
+              x2: (x + 1) * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
+              class: "line-box"
+            }
+          });
+          _utils2.default.appendElement(lines, line);
+        }
+
+        if (y + 1 < boardState.boardSize.y && boardState.intersectionAt(y + 1, x).value !== "oob") {
+          var line = _utils2.default.createSVGElement("line", {
+            attributes: {
+              y1: y * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
+              x1: x * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
+              y2: (y + 1) * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
+              x2: x * (renderer.INTERSECTION_GAP_SIZE + 1) - 0.5,
+              class: "line-box"
+            }
+          });
+          _utils2.default.appendElement(lines, line);
+        }
       }
     }
 
@@ -148,7 +166,7 @@ var constructSVG = function constructSVG(renderer, boardState, _ref2) {
       var _loop = function _loop(_y) {
         // TODO: 16 is for the rendered height _on my browser_. not reliable...
 
-        [16 / 2 + 1 - (16 + 16 / 2 + 16 / (2 * 2) + 16 / (2 * 2 * 2)), 16 / 2 + 1 + (16 + 16 / 2) + (boardState.boardSize - 1) * (renderer.INTERSECTION_GAP_SIZE + 1)].forEach(function (verticalOffset) {
+        [16 / 2 + 1 - (16 + 16 / 2 + 16 / (2 * 2) + 16 / (2 * 2 * 2)), 16 / 2 + 1 + (16 + 16 / 2) + (boardState.boardSize.x - 1) * (renderer.INTERSECTION_GAP_SIZE + 1)].forEach(function (verticalOffset) {
           _utils2.default.appendElement(coordinateContainer, _utils2.default.createSVGElement("text", {
             text: boardState.xCoordinateFor(_y),
             attributes: {
@@ -159,7 +177,7 @@ var constructSVG = function constructSVG(renderer, boardState, _ref2) {
           }));
         });
 
-        [-1 * (16 + 16 / 2 + 16 / (2 * 2)), 16 + 16 / 2 + 16 / (2 * 2) + (boardState.boardSize - 1) * (renderer.INTERSECTION_GAP_SIZE + 1)].forEach(function (horizontalOffset) {
+        [-1 * (16 + 16 / 2 + 16 / (2 * 2)), 16 + 16 / 2 + 16 / (2 * 2) + (boardState.boardSize.y - 1) * (renderer.INTERSECTION_GAP_SIZE + 1)].forEach(function (horizontalOffset) {
           _utils2.default.appendElement(coordinateContainer, _utils2.default.createSVGElement("text", {
             text: boardState.yCoordinateFor(_y),
             attributes: {
@@ -173,7 +191,7 @@ var constructSVG = function constructSVG(renderer, boardState, _ref2) {
         _utils2.default.appendElement(svg, coordinateContainer);
       };
 
-      for (var _y = 0; _y < boardState.boardSize; _y++) {
+      for (var _y = 0; _y < boardState.boardSize.y; _y++) {
         _loop(_y);
       }
     })();
@@ -181,8 +199,8 @@ var constructSVG = function constructSVG(renderer, boardState, _ref2) {
 
   var intersections = _utils2.default.createSVGElement("g", { attributes: { class: "intersections" } });
 
-  for (var _y2 = 0; _y2 < boardState.boardSize; _y2++) {
-    for (var _x = 0; _x < boardState.boardSize; _x++) {
+  for (var _y2 = 0; _y2 < boardState.boardSize.y; _y2++) {
+    for (var _x = 0; _x < boardState.boardSize.x; _x++) {
       var intersectionGroup = _utils2.default.createSVGElement("g", {
         attributes: {
           class: "intersection"
@@ -203,8 +221,9 @@ var constructSVG = function constructSVG(renderer, boardState, _ref2) {
         attributes: {
           y: _y2 * (renderer.INTERSECTION_GAP_SIZE + 1) - renderer.INTERSECTION_GAP_SIZE / 2 - 0.5,
           x: _x * (renderer.INTERSECTION_GAP_SIZE + 1) - renderer.INTERSECTION_GAP_SIZE / 2 - 0.5,
-          width: renderer.INTERSECTION_GAP_SIZE,
-          height: renderer.INTERSECTION_GAP_SIZE
+          width: renderer.INTERSECTION_GAP_SIZE + 1,
+          height: renderer.INTERSECTION_GAP_SIZE + 1,
+          class: "intersection-tint"
         }
       });
       _utils2.default.appendElement(intersectionInnerContainer, intersectionBox);
@@ -290,8 +309,8 @@ SVGRenderer.prototype.generateBoard = function (boardState, _ref3) {
   var svg = constructSVG(this, boardState, { hasCoordinates: hasCoordinates, smallerStones: smallerStones, flatStones: flatStones });
 
   this.svgElement = svg;
-  this.svgElement.setAttribute("height", this.BOARD_LENGTH);
-  this.svgElement.setAttribute("width", this.BOARD_LENGTH);
+  this.svgElement.setAttribute("height", this.BOARD_HEIGHT);
+  this.svgElement.setAttribute("width", this.BOARD_WIDTH);
 
   return svg;
 };
diff --git a/node_modules/tenuki/lib/zobrist.js b/node_modules/tenuki/lib/zobrist.js
index 935f5e8..8e1e092 100644
--- a/node_modules/tenuki/lib/zobrist.js
+++ b/node_modules/tenuki/lib/zobrist.js
@@ -30,7 +30,7 @@ exports.default = {
 
     intersections.forEach(function (i) {
       if (!i.isEmpty()) {
-        var initial = initialBitstringFor(boardSize, i.y, i.x, i.value);
+        var initial = initialBitstringFor(boardSize.y * 100 + boardSize.x, i.y, i.x, i.value);
         h = h ^ initial;
       }
     });
